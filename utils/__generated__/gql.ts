/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  fragment WebsiteData on Website {\n    id\n    admins(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          adminID\n          admin {\n            address\n            ensName\n          }\n          super\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    adminsCount\n    pieces(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          CID\n          name\n          category {\n            id\n            name\n          }\n          details {\n            tags\n            type\n            media\n            IMDBID\n            TMDBID\n            format\n            poster\n            bitrate\n            albumTitle\n            artistNames\n            releaseType\n            musicBrainzID\n            imageThumbnailCID\n            initialReleaseYear\n            releaseDescription\n          }\n          approved\n          rejected\n          rejectionReason\n          ownerID\n          owner {\n            address\n            ensName\n          }\n          likes(first: $pageSizeMax) {\n            edges {\n              node {\n                id\n                owner {\n                  address\n                }\n                piece {\n                  id\n                }\n              }\n            }\n          }\n          likesCount\n          dislikes(first: $pageSizeMax) {\n            edges {\n              node {\n                id\n                owner {\n                  address\n                }\n                piece {\n                  id\n                }\n              }\n            }\n          }\n          dislikesCount\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    piecesCount\n    subscriptions(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          subscribedID\n          subscribedWebsite {\n            id\n            websiteName\n            description\n            image\n            pieces(first: $pageSizeMedium) {\n              edges {\n                node {\n                  id\n                  CID\n                  name\n                  category {\n                    id\n                    name\n                  }\n                  details {\n                    tags\n                    type\n                    media\n                    IMDBID\n                    TMDBID\n                    format\n                    poster\n                    bitrate\n                    albumTitle\n                    artistNames\n                    releaseType\n                    musicBrainzID\n                    imageThumbnailCID\n                    initialReleaseYear\n                    releaseDescription\n                  }\n                  approved\n                  rejected\n                  rejectionReason\n                  likes(first: $pageSizeMax) {\n                    edges {\n                      node {\n                        id\n                        owner {\n                          address\n                        }\n                        piece {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  likesCount\n                  dislikes(first: $pageSizeMax) {\n                    edges {\n                      node {\n                        id\n                        owner {\n                          address\n                        }\n                        piece {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  dislikesCount\n                  metadata {\n                    createdAt\n                    updatedAt\n                  }\n                }\n              }\n            }\n            piecesCount\n          }\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    subscriptionsCount\n    users(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          address\n          ensName\n          pieces(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          piecesCount\n          pieceLikes(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n                piece {\n                  id\n                }\n                owner {\n                  address\n                }\n              }\n            }\n          }\n          pieceLikesCount\n          pieceDislikes(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n                piece {\n                  id\n                }\n                owner {\n                  address\n                }\n              }\n            }\n          }\n          pieceDislikesCount\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    usersCount\n    featured(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          piece {\n            id\n            CID\n            name\n            category {\n              id\n              name\n            }\n            details {\n              tags\n              type\n              media\n              IMDBID\n              TMDBID\n              format\n              poster\n              bitrate\n              albumTitle\n              artistNames\n              releaseType\n              musicBrainzID\n              imageThumbnailCID\n              initialReleaseYear\n              releaseDescription\n            }\n            approved\n            rejected\n            rejectionReason\n            ownerID\n            owner {\n              address\n              ensName\n            }\n            metadata {\n              createdAt\n              updatedAt\n            }\n          }\n          startAt\n          endAt\n        }\n      }\n    }\n    featuredCount\n    categories(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          name\n          pieces(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n                CID\n                name\n                category {\n                  id\n                  name\n                }\n                details {\n                  tags\n                  type\n                  media\n                  IMDBID\n                  TMDBID\n                  format\n                  poster\n                  bitrate\n                  albumTitle\n                  artistNames\n                  releaseType\n                  musicBrainzID\n                  imageThumbnailCID\n                  initialReleaseYear\n                  releaseDescription\n                }\n                approved\n                rejected\n                rejectionReason\n                likes(first: $pageSizeMax) {\n                  edges {\n                    node {\n                      id\n                      owner {\n                        address\n                      }\n                      piece {\n                        id\n                      }\n                    }\n                  }\n                }\n                likesCount\n                dislikes(first: $pageSizeMax) {\n                  edges {\n                    node {\n                      id\n                      owner {\n                        address\n                      }\n                      piece {\n                        id\n                      }\n                    }\n                  }\n                }\n                dislikesCount\n                ownerID\n                owner {\n                  address\n                  ensName\n                }\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n          piecesCount\n          likesCount\n          dislikesCount\n        }\n      }\n    }\n    categoriesCount\n  }\n": types.WebsiteDataFragmentDoc,
    "\n  fragment WebsiteAdmin on Admin {\n    id\n    adminID\n    admin {\n      address\n      ensName\n    }\n    super\n    inactive\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n": types.WebsiteAdminFragmentDoc,
    "\n  fragment WebsiteUser on EthAccount {\n    id\n    address\n    ensName\n    pieces(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n    piecesCount\n    pieceLikes(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          piece {\n            id\n          }\n          owner {\n            address\n          }\n        }\n      }\n    }\n    pieceLikesCount\n    pieceDislikes(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          piece {\n            id\n          }\n          owner {\n            address\n          }\n        }\n      }\n    }\n    pieceDislikesCount\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n": types.WebsiteUserFragmentDoc,
    "\n  fragment PieceLike on PieceLike {\n    id\n    piece {\n      id\n    }\n    owner {\n      address\n    }\n  }\n": types.PieceLikeFragmentDoc,
    "\n  fragment PieceDislike on PieceDislike {\n    id\n    piece {\n      id\n    }\n    owner {\n      address\n    }\n  }\n": types.PieceDislikeFragmentDoc,
    "\n  fragment Category on Category {\n    id\n    name\n  }\n": types.CategoryFragmentDoc,
    "\n  fragment Piece on Piece {\n    id\n    CID\n    name\n    category {\n      id\n      name\n    }\n    details {\n      tags\n      type\n      media\n      IMDBID\n      TMDBID\n      format\n      poster\n      bitrate\n      albumTitle\n      artistNames\n      releaseType\n      musicBrainzID\n      imageThumbnailCID\n      initialReleaseYear\n      releaseDescription\n    }\n    approved\n    rejected\n    rejectionReason\n    likes(first: $pageSizeMax) {\n      edges {\n        node {\n          id\n          owner {\n            address\n          }\n          piece {\n            id\n          }\n        }\n      }\n    }\n    likesCount\n    dislikes(first: $pageSizeMax) {\n      edges {\n        node {\n          id\n          owner {\n            address\n          }\n          piece {\n            id\n          }\n        }\n      }\n    }\n    dislikesCount\n    ownerID\n    owner {\n      address\n      ensName\n    }\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n": types.PieceFragmentDoc,
    "\n  query Website($id: ID!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        websiteName\n        description\n        image\n      }\n    }\n  }\n": types.WebsiteDocument,
    "\n  query WebsiteData($id: ID!, $pageSizeMedium: Int!, $pageSizeMax: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        admins(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              adminID\n              admin {\n                address\n                ensName\n              }\n              super\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        adminsCount\n        pieces(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category {\n                id\n                name\n              }\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              likes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              likesCount\n              dislikes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              dislikesCount\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n        subscriptions(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              subscribedID\n              subscribedWebsite {\n                id\n                websiteName\n                description\n                image\n                pieces(first: $pageSizeMedium) {\n                  edges {\n                    node {\n                      id\n                      CID\n                      name\n                      category {\n                        id\n                        name\n                      }\n                      details {\n                        tags\n                        type\n                        media\n                        IMDBID\n                        TMDBID\n                        format\n                        poster\n                        bitrate\n                        albumTitle\n                        artistNames\n                        releaseType\n                        musicBrainzID\n                        imageThumbnailCID\n                        initialReleaseYear\n                        releaseDescription\n                      }\n                      approved\n                      rejected\n                      rejectionReason\n                      likes(first: $pageSizeMax) {\n                        edges {\n                          node {\n                            id\n                            owner {\n                              address\n                            }\n                            piece {\n                              id\n                            }\n                          }\n                        }\n                      }\n                      likesCount\n                      dislikes(first: $pageSizeMax) {\n                        edges {\n                          node {\n                            id\n                            owner {\n                              address\n                            }\n                            piece {\n                              id\n                            }\n                          }\n                        }\n                      }\n                      dislikesCount\n                      metadata {\n                        createdAt\n                        updatedAt\n                      }\n                    }\n                  }\n                }\n                piecesCount\n              }\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        subscriptionsCount\n        users(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              address\n              ensName\n              pieces(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n              piecesCount\n              pieceLikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceLikesCount\n              pieceDislikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceDislikesCount\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        usersCount\n        featured(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              piece {\n                id\n                CID\n                name\n                category {\n                  id\n                  name\n                }\n                details {\n                  tags\n                  type\n                  media\n                  IMDBID\n                  TMDBID\n                  format\n                  poster\n                  bitrate\n                  albumTitle\n                  artistNames\n                  releaseType\n                  musicBrainzID\n                  imageThumbnailCID\n                  initialReleaseYear\n                  releaseDescription\n                }\n                approved\n                rejected\n                rejectionReason\n                ownerID\n                owner {\n                  address\n                  ensName\n                }\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n              startAt\n              endAt\n            }\n          }\n        }\n        featuredCount\n        categories(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              name\n              pieces(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    CID\n                    name\n                    category {\n                      id\n                      name\n                    }\n                    details {\n                      tags\n                      type\n                      media\n                      IMDBID\n                      TMDBID\n                      format\n                      poster\n                      bitrate\n                      albumTitle\n                      artistNames\n                      releaseType\n                      musicBrainzID\n                      imageThumbnailCID\n                      initialReleaseYear\n                      releaseDescription\n                    }\n                    approved\n                    rejected\n                    rejectionReason\n                    likes(first: $pageSizeMax) {\n                      edges {\n                        node {\n                          id\n                          owner {\n                            address\n                          }\n                          piece {\n                            id\n                          }\n                        }\n                      }\n                    }\n                    likesCount\n                    dislikes(first: $pageSizeMax) {\n                      edges {\n                        node {\n                          id\n                          owner {\n                            address\n                          }\n                          piece {\n                            id\n                          }\n                        }\n                      }\n                    }\n                    dislikesCount\n                    ownerID\n                    owner {\n                      address\n                      ensName\n                    }\n                    metadata {\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n              }\n              piecesCount\n              likesCount\n              dislikesCount\n            }\n          }\n        }\n        categoriesCount\n      }\n    }\n  }\n": types.WebsiteDataDocument,
    "\n  query WebsiteUsers($id: ID!, $pageSizeMedium: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        users(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              address\n              ensName\n              pieces(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n              piecesCount\n              pieceLikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceLikesCount\n              pieceDislikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceDislikesCount\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        usersCount\n      }\n    }\n  }\n": types.WebsiteUsersDocument,
    "\n  query WebsitePieces($id: ID!, $piecesPageSize: Int!, $pageSizeMax: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        pieces(first: $piecesPageSize) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category {\n                id\n                name\n              }\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              likes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              likesCount\n              dislikes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              dislikesCount\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n      }\n    }\n  }\n": types.WebsitePiecesDocument,
    "\n  query EthAccount($id: ID!, $pageSizeMedium: Int!) {\n    node(id: $id) {\n      ... on EthAccount {\n        id\n        address\n        ensName\n        pieces(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        piecesCount\n        pieceLikes(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        pieceLikesCount\n        pieceDislikes(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        pieceDislikesCount\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.EthAccountDocument,
    "\n  mutation CreateEthAccount($input: CreateEthAccountInput!) {\n    createEthAccount(input: $input) {\n      document {\n        id\n        address\n        ensName\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.CreateEthAccountDocument,
    "\n  query Piece($id: ID!, $pageSizeMax: Int!) {\n    node(id: $id) {\n      ... on Piece {\n        id\n        CID\n        name\n        category {\n          id\n          name\n        }\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        likes(first: $pageSizeMax) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        likesCount\n        dislikes(first: $pageSizeMax) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        dislikesCount\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.PieceDocument,
    "\n  mutation CreatePiece($input: CreatePieceInput!) {\n    createPiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category {\n          id\n          name\n        }\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.CreatePieceDocument,
    "\n  mutation UpdatePiece($input: UpdatePieceInput!) {\n    updatePiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category {\n          id\n          name\n        }\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.UpdatePieceDocument,
    "\n  mutation CreatePieceLike($input: CreatePieceLikeInput!) {\n    createPieceLike(input: $input) {\n      document {\n        id\n        piece {\n          id\n        }\n        owner {\n          address\n        }\n      }\n    }\n  }\n": types.CreatePieceLikeDocument,
    "\n  mutation CreateCategoryLike($input: CreateCategoryLikeInput!) {\n    createCategoryLike(input: $input) {\n      document {\n        id\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateCategoryLikeDocument,
    "\n  mutation CreatePieceDislike($input: CreatePieceDislikeInput!) {\n    createPieceDislike(input: $input) {\n      document {\n        id\n        piece {\n          id\n        }\n        owner {\n          address\n        }\n      }\n    }\n  }\n": types.CreatePieceDislikeDocument,
    "\n  mutation CreateCategoryDislike($input: CreateCategoryDislikeInput!) {\n    createCategoryDislike(input: $input) {\n      document {\n        id\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateCategoryDislikeDocument,
    "\n  mutation CreateFeatured($input: CreateFeaturedInput!) {\n    createFeatured(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": types.CreateFeaturedDocument,
    "\n  query SubscriptionIndex($pageSize: Int!) {\n    subscriptionIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          subscribedID\n          subscribedWebsite {\n            id\n            websiteName\n            description\n            image\n          }\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n": types.SubscriptionIndexDocument,
    "\n  query Subscription($id: ID!, $piecesPageSize: Int!) {\n    node(id: $id) {\n      ... on Subscription {\n        id\n        subscribedID\n        subscribedWebsite {\n          id\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.SubscriptionDocument,
    "\n  mutation CreateSubscription($input: CreateSubscriptionInput!) {\n    createSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          id\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.CreateSubscriptionDocument,
    "\n  mutation UpdateSubscription($input: UpdateSubscriptionInput!) {\n    updateSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          id\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.UpdateSubscriptionDocument,
    "\n  query Admin($id: ID!) {\n    node(id: $id) {\n      ... on Admin {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.AdminDocument,
    "\n  mutation CreateAdmin($input: CreateAdminInput!) {\n    createAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.CreateAdminDocument,
    "\n  mutation UpdateaAdmin($input: UpdateAdminInput!) {\n    updateAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.UpdateaAdminDocument,
    "\n  query WebsiteIndex($pageSize: Int!) {\n    websiteIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          websiteName\n          description\n          image\n        }\n      }\n    }\n  }\n": types.WebsiteIndexDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WebsiteData on Website {\n    id\n    admins(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          adminID\n          admin {\n            address\n            ensName\n          }\n          super\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    adminsCount\n    pieces(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          CID\n          name\n          category {\n            id\n            name\n          }\n          details {\n            tags\n            type\n            media\n            IMDBID\n            TMDBID\n            format\n            poster\n            bitrate\n            albumTitle\n            artistNames\n            releaseType\n            musicBrainzID\n            imageThumbnailCID\n            initialReleaseYear\n            releaseDescription\n          }\n          approved\n          rejected\n          rejectionReason\n          ownerID\n          owner {\n            address\n            ensName\n          }\n          likes(first: $pageSizeMax) {\n            edges {\n              node {\n                id\n                owner {\n                  address\n                }\n                piece {\n                  id\n                }\n              }\n            }\n          }\n          likesCount\n          dislikes(first: $pageSizeMax) {\n            edges {\n              node {\n                id\n                owner {\n                  address\n                }\n                piece {\n                  id\n                }\n              }\n            }\n          }\n          dislikesCount\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    piecesCount\n    subscriptions(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          subscribedID\n          subscribedWebsite {\n            id\n            websiteName\n            description\n            image\n            pieces(first: $pageSizeMedium) {\n              edges {\n                node {\n                  id\n                  CID\n                  name\n                  category {\n                    id\n                    name\n                  }\n                  details {\n                    tags\n                    type\n                    media\n                    IMDBID\n                    TMDBID\n                    format\n                    poster\n                    bitrate\n                    albumTitle\n                    artistNames\n                    releaseType\n                    musicBrainzID\n                    imageThumbnailCID\n                    initialReleaseYear\n                    releaseDescription\n                  }\n                  approved\n                  rejected\n                  rejectionReason\n                  likes(first: $pageSizeMax) {\n                    edges {\n                      node {\n                        id\n                        owner {\n                          address\n                        }\n                        piece {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  likesCount\n                  dislikes(first: $pageSizeMax) {\n                    edges {\n                      node {\n                        id\n                        owner {\n                          address\n                        }\n                        piece {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  dislikesCount\n                  metadata {\n                    createdAt\n                    updatedAt\n                  }\n                }\n              }\n            }\n            piecesCount\n          }\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    subscriptionsCount\n    users(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          address\n          ensName\n          pieces(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          piecesCount\n          pieceLikes(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n                piece {\n                  id\n                }\n                owner {\n                  address\n                }\n              }\n            }\n          }\n          pieceLikesCount\n          pieceDislikes(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n                piece {\n                  id\n                }\n                owner {\n                  address\n                }\n              }\n            }\n          }\n          pieceDislikesCount\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    usersCount\n    featured(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          piece {\n            id\n            CID\n            name\n            category {\n              id\n              name\n            }\n            details {\n              tags\n              type\n              media\n              IMDBID\n              TMDBID\n              format\n              poster\n              bitrate\n              albumTitle\n              artistNames\n              releaseType\n              musicBrainzID\n              imageThumbnailCID\n              initialReleaseYear\n              releaseDescription\n            }\n            approved\n            rejected\n            rejectionReason\n            ownerID\n            owner {\n              address\n              ensName\n            }\n            metadata {\n              createdAt\n              updatedAt\n            }\n          }\n          startAt\n          endAt\n        }\n      }\n    }\n    featuredCount\n    categories(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          name\n          pieces(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n                CID\n                name\n                category {\n                  id\n                  name\n                }\n                details {\n                  tags\n                  type\n                  media\n                  IMDBID\n                  TMDBID\n                  format\n                  poster\n                  bitrate\n                  albumTitle\n                  artistNames\n                  releaseType\n                  musicBrainzID\n                  imageThumbnailCID\n                  initialReleaseYear\n                  releaseDescription\n                }\n                approved\n                rejected\n                rejectionReason\n                likes(first: $pageSizeMax) {\n                  edges {\n                    node {\n                      id\n                      owner {\n                        address\n                      }\n                      piece {\n                        id\n                      }\n                    }\n                  }\n                }\n                likesCount\n                dislikes(first: $pageSizeMax) {\n                  edges {\n                    node {\n                      id\n                      owner {\n                        address\n                      }\n                      piece {\n                        id\n                      }\n                    }\n                  }\n                }\n                dislikesCount\n                ownerID\n                owner {\n                  address\n                  ensName\n                }\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n          piecesCount\n          likesCount\n          dislikesCount\n        }\n      }\n    }\n    categoriesCount\n  }\n"): (typeof documents)["\n  fragment WebsiteData on Website {\n    id\n    admins(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          adminID\n          admin {\n            address\n            ensName\n          }\n          super\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    adminsCount\n    pieces(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          CID\n          name\n          category {\n            id\n            name\n          }\n          details {\n            tags\n            type\n            media\n            IMDBID\n            TMDBID\n            format\n            poster\n            bitrate\n            albumTitle\n            artistNames\n            releaseType\n            musicBrainzID\n            imageThumbnailCID\n            initialReleaseYear\n            releaseDescription\n          }\n          approved\n          rejected\n          rejectionReason\n          ownerID\n          owner {\n            address\n            ensName\n          }\n          likes(first: $pageSizeMax) {\n            edges {\n              node {\n                id\n                owner {\n                  address\n                }\n                piece {\n                  id\n                }\n              }\n            }\n          }\n          likesCount\n          dislikes(first: $pageSizeMax) {\n            edges {\n              node {\n                id\n                owner {\n                  address\n                }\n                piece {\n                  id\n                }\n              }\n            }\n          }\n          dislikesCount\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    piecesCount\n    subscriptions(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          subscribedID\n          subscribedWebsite {\n            id\n            websiteName\n            description\n            image\n            pieces(first: $pageSizeMedium) {\n              edges {\n                node {\n                  id\n                  CID\n                  name\n                  category {\n                    id\n                    name\n                  }\n                  details {\n                    tags\n                    type\n                    media\n                    IMDBID\n                    TMDBID\n                    format\n                    poster\n                    bitrate\n                    albumTitle\n                    artistNames\n                    releaseType\n                    musicBrainzID\n                    imageThumbnailCID\n                    initialReleaseYear\n                    releaseDescription\n                  }\n                  approved\n                  rejected\n                  rejectionReason\n                  likes(first: $pageSizeMax) {\n                    edges {\n                      node {\n                        id\n                        owner {\n                          address\n                        }\n                        piece {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  likesCount\n                  dislikes(first: $pageSizeMax) {\n                    edges {\n                      node {\n                        id\n                        owner {\n                          address\n                        }\n                        piece {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  dislikesCount\n                  metadata {\n                    createdAt\n                    updatedAt\n                  }\n                }\n              }\n            }\n            piecesCount\n          }\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    subscriptionsCount\n    users(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          address\n          ensName\n          pieces(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          piecesCount\n          pieceLikes(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n                piece {\n                  id\n                }\n                owner {\n                  address\n                }\n              }\n            }\n          }\n          pieceLikesCount\n          pieceDislikes(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n                piece {\n                  id\n                }\n                owner {\n                  address\n                }\n              }\n            }\n          }\n          pieceDislikesCount\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    usersCount\n    featured(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          piece {\n            id\n            CID\n            name\n            category {\n              id\n              name\n            }\n            details {\n              tags\n              type\n              media\n              IMDBID\n              TMDBID\n              format\n              poster\n              bitrate\n              albumTitle\n              artistNames\n              releaseType\n              musicBrainzID\n              imageThumbnailCID\n              initialReleaseYear\n              releaseDescription\n            }\n            approved\n            rejected\n            rejectionReason\n            ownerID\n            owner {\n              address\n              ensName\n            }\n            metadata {\n              createdAt\n              updatedAt\n            }\n          }\n          startAt\n          endAt\n        }\n      }\n    }\n    featuredCount\n    categories(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          name\n          pieces(first: $pageSizeMedium) {\n            edges {\n              node {\n                id\n                CID\n                name\n                category {\n                  id\n                  name\n                }\n                details {\n                  tags\n                  type\n                  media\n                  IMDBID\n                  TMDBID\n                  format\n                  poster\n                  bitrate\n                  albumTitle\n                  artistNames\n                  releaseType\n                  musicBrainzID\n                  imageThumbnailCID\n                  initialReleaseYear\n                  releaseDescription\n                }\n                approved\n                rejected\n                rejectionReason\n                likes(first: $pageSizeMax) {\n                  edges {\n                    node {\n                      id\n                      owner {\n                        address\n                      }\n                      piece {\n                        id\n                      }\n                    }\n                  }\n                }\n                likesCount\n                dislikes(first: $pageSizeMax) {\n                  edges {\n                    node {\n                      id\n                      owner {\n                        address\n                      }\n                      piece {\n                        id\n                      }\n                    }\n                  }\n                }\n                dislikesCount\n                ownerID\n                owner {\n                  address\n                  ensName\n                }\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n          piecesCount\n          likesCount\n          dislikesCount\n        }\n      }\n    }\n    categoriesCount\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WebsiteAdmin on Admin {\n    id\n    adminID\n    admin {\n      address\n      ensName\n    }\n    super\n    inactive\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  fragment WebsiteAdmin on Admin {\n    id\n    adminID\n    admin {\n      address\n      ensName\n    }\n    super\n    inactive\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WebsiteUser on EthAccount {\n    id\n    address\n    ensName\n    pieces(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n    piecesCount\n    pieceLikes(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          piece {\n            id\n          }\n          owner {\n            address\n          }\n        }\n      }\n    }\n    pieceLikesCount\n    pieceDislikes(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          piece {\n            id\n          }\n          owner {\n            address\n          }\n        }\n      }\n    }\n    pieceDislikesCount\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  fragment WebsiteUser on EthAccount {\n    id\n    address\n    ensName\n    pieces(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n    piecesCount\n    pieceLikes(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          piece {\n            id\n          }\n          owner {\n            address\n          }\n        }\n      }\n    }\n    pieceLikesCount\n    pieceDislikes(first: $pageSizeMedium) {\n      edges {\n        node {\n          id\n          piece {\n            id\n          }\n          owner {\n            address\n          }\n        }\n      }\n    }\n    pieceDislikesCount\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PieceLike on PieceLike {\n    id\n    piece {\n      id\n    }\n    owner {\n      address\n    }\n  }\n"): (typeof documents)["\n  fragment PieceLike on PieceLike {\n    id\n    piece {\n      id\n    }\n    owner {\n      address\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PieceDislike on PieceDislike {\n    id\n    piece {\n      id\n    }\n    owner {\n      address\n    }\n  }\n"): (typeof documents)["\n  fragment PieceDislike on PieceDislike {\n    id\n    piece {\n      id\n    }\n    owner {\n      address\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Category on Category {\n    id\n    name\n  }\n"): (typeof documents)["\n  fragment Category on Category {\n    id\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Piece on Piece {\n    id\n    CID\n    name\n    category {\n      id\n      name\n    }\n    details {\n      tags\n      type\n      media\n      IMDBID\n      TMDBID\n      format\n      poster\n      bitrate\n      albumTitle\n      artistNames\n      releaseType\n      musicBrainzID\n      imageThumbnailCID\n      initialReleaseYear\n      releaseDescription\n    }\n    approved\n    rejected\n    rejectionReason\n    likes(first: $pageSizeMax) {\n      edges {\n        node {\n          id\n          owner {\n            address\n          }\n          piece {\n            id\n          }\n        }\n      }\n    }\n    likesCount\n    dislikes(first: $pageSizeMax) {\n      edges {\n        node {\n          id\n          owner {\n            address\n          }\n          piece {\n            id\n          }\n        }\n      }\n    }\n    dislikesCount\n    ownerID\n    owner {\n      address\n      ensName\n    }\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  fragment Piece on Piece {\n    id\n    CID\n    name\n    category {\n      id\n      name\n    }\n    details {\n      tags\n      type\n      media\n      IMDBID\n      TMDBID\n      format\n      poster\n      bitrate\n      albumTitle\n      artistNames\n      releaseType\n      musicBrainzID\n      imageThumbnailCID\n      initialReleaseYear\n      releaseDescription\n    }\n    approved\n    rejected\n    rejectionReason\n    likes(first: $pageSizeMax) {\n      edges {\n        node {\n          id\n          owner {\n            address\n          }\n          piece {\n            id\n          }\n        }\n      }\n    }\n    likesCount\n    dislikes(first: $pageSizeMax) {\n      edges {\n        node {\n          id\n          owner {\n            address\n          }\n          piece {\n            id\n          }\n        }\n      }\n    }\n    dislikesCount\n    ownerID\n    owner {\n      address\n      ensName\n    }\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Website($id: ID!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        websiteName\n        description\n        image\n      }\n    }\n  }\n"): (typeof documents)["\n  query Website($id: ID!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        websiteName\n        description\n        image\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WebsiteData($id: ID!, $pageSizeMedium: Int!, $pageSizeMax: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        admins(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              adminID\n              admin {\n                address\n                ensName\n              }\n              super\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        adminsCount\n        pieces(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category {\n                id\n                name\n              }\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              likes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              likesCount\n              dislikes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              dislikesCount\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n        subscriptions(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              subscribedID\n              subscribedWebsite {\n                id\n                websiteName\n                description\n                image\n                pieces(first: $pageSizeMedium) {\n                  edges {\n                    node {\n                      id\n                      CID\n                      name\n                      category {\n                        id\n                        name\n                      }\n                      details {\n                        tags\n                        type\n                        media\n                        IMDBID\n                        TMDBID\n                        format\n                        poster\n                        bitrate\n                        albumTitle\n                        artistNames\n                        releaseType\n                        musicBrainzID\n                        imageThumbnailCID\n                        initialReleaseYear\n                        releaseDescription\n                      }\n                      approved\n                      rejected\n                      rejectionReason\n                      likes(first: $pageSizeMax) {\n                        edges {\n                          node {\n                            id\n                            owner {\n                              address\n                            }\n                            piece {\n                              id\n                            }\n                          }\n                        }\n                      }\n                      likesCount\n                      dislikes(first: $pageSizeMax) {\n                        edges {\n                          node {\n                            id\n                            owner {\n                              address\n                            }\n                            piece {\n                              id\n                            }\n                          }\n                        }\n                      }\n                      dislikesCount\n                      metadata {\n                        createdAt\n                        updatedAt\n                      }\n                    }\n                  }\n                }\n                piecesCount\n              }\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        subscriptionsCount\n        users(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              address\n              ensName\n              pieces(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n              piecesCount\n              pieceLikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceLikesCount\n              pieceDislikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceDislikesCount\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        usersCount\n        featured(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              piece {\n                id\n                CID\n                name\n                category {\n                  id\n                  name\n                }\n                details {\n                  tags\n                  type\n                  media\n                  IMDBID\n                  TMDBID\n                  format\n                  poster\n                  bitrate\n                  albumTitle\n                  artistNames\n                  releaseType\n                  musicBrainzID\n                  imageThumbnailCID\n                  initialReleaseYear\n                  releaseDescription\n                }\n                approved\n                rejected\n                rejectionReason\n                ownerID\n                owner {\n                  address\n                  ensName\n                }\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n              startAt\n              endAt\n            }\n          }\n        }\n        featuredCount\n        categories(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              name\n              pieces(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    CID\n                    name\n                    category {\n                      id\n                      name\n                    }\n                    details {\n                      tags\n                      type\n                      media\n                      IMDBID\n                      TMDBID\n                      format\n                      poster\n                      bitrate\n                      albumTitle\n                      artistNames\n                      releaseType\n                      musicBrainzID\n                      imageThumbnailCID\n                      initialReleaseYear\n                      releaseDescription\n                    }\n                    approved\n                    rejected\n                    rejectionReason\n                    likes(first: $pageSizeMax) {\n                      edges {\n                        node {\n                          id\n                          owner {\n                            address\n                          }\n                          piece {\n                            id\n                          }\n                        }\n                      }\n                    }\n                    likesCount\n                    dislikes(first: $pageSizeMax) {\n                      edges {\n                        node {\n                          id\n                          owner {\n                            address\n                          }\n                          piece {\n                            id\n                          }\n                        }\n                      }\n                    }\n                    dislikesCount\n                    ownerID\n                    owner {\n                      address\n                      ensName\n                    }\n                    metadata {\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n              }\n              piecesCount\n              likesCount\n              dislikesCount\n            }\n          }\n        }\n        categoriesCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query WebsiteData($id: ID!, $pageSizeMedium: Int!, $pageSizeMax: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        admins(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              adminID\n              admin {\n                address\n                ensName\n              }\n              super\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        adminsCount\n        pieces(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category {\n                id\n                name\n              }\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              likes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              likesCount\n              dislikes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              dislikesCount\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n        subscriptions(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              subscribedID\n              subscribedWebsite {\n                id\n                websiteName\n                description\n                image\n                pieces(first: $pageSizeMedium) {\n                  edges {\n                    node {\n                      id\n                      CID\n                      name\n                      category {\n                        id\n                        name\n                      }\n                      details {\n                        tags\n                        type\n                        media\n                        IMDBID\n                        TMDBID\n                        format\n                        poster\n                        bitrate\n                        albumTitle\n                        artistNames\n                        releaseType\n                        musicBrainzID\n                        imageThumbnailCID\n                        initialReleaseYear\n                        releaseDescription\n                      }\n                      approved\n                      rejected\n                      rejectionReason\n                      likes(first: $pageSizeMax) {\n                        edges {\n                          node {\n                            id\n                            owner {\n                              address\n                            }\n                            piece {\n                              id\n                            }\n                          }\n                        }\n                      }\n                      likesCount\n                      dislikes(first: $pageSizeMax) {\n                        edges {\n                          node {\n                            id\n                            owner {\n                              address\n                            }\n                            piece {\n                              id\n                            }\n                          }\n                        }\n                      }\n                      dislikesCount\n                      metadata {\n                        createdAt\n                        updatedAt\n                      }\n                    }\n                  }\n                }\n                piecesCount\n              }\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        subscriptionsCount\n        users(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              address\n              ensName\n              pieces(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n              piecesCount\n              pieceLikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceLikesCount\n              pieceDislikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceDislikesCount\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        usersCount\n        featured(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              piece {\n                id\n                CID\n                name\n                category {\n                  id\n                  name\n                }\n                details {\n                  tags\n                  type\n                  media\n                  IMDBID\n                  TMDBID\n                  format\n                  poster\n                  bitrate\n                  albumTitle\n                  artistNames\n                  releaseType\n                  musicBrainzID\n                  imageThumbnailCID\n                  initialReleaseYear\n                  releaseDescription\n                }\n                approved\n                rejected\n                rejectionReason\n                ownerID\n                owner {\n                  address\n                  ensName\n                }\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n              startAt\n              endAt\n            }\n          }\n        }\n        featuredCount\n        categories(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              name\n              pieces(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    CID\n                    name\n                    category {\n                      id\n                      name\n                    }\n                    details {\n                      tags\n                      type\n                      media\n                      IMDBID\n                      TMDBID\n                      format\n                      poster\n                      bitrate\n                      albumTitle\n                      artistNames\n                      releaseType\n                      musicBrainzID\n                      imageThumbnailCID\n                      initialReleaseYear\n                      releaseDescription\n                    }\n                    approved\n                    rejected\n                    rejectionReason\n                    likes(first: $pageSizeMax) {\n                      edges {\n                        node {\n                          id\n                          owner {\n                            address\n                          }\n                          piece {\n                            id\n                          }\n                        }\n                      }\n                    }\n                    likesCount\n                    dislikes(first: $pageSizeMax) {\n                      edges {\n                        node {\n                          id\n                          owner {\n                            address\n                          }\n                          piece {\n                            id\n                          }\n                        }\n                      }\n                    }\n                    dislikesCount\n                    ownerID\n                    owner {\n                      address\n                      ensName\n                    }\n                    metadata {\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n              }\n              piecesCount\n              likesCount\n              dislikesCount\n            }\n          }\n        }\n        categoriesCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WebsiteUsers($id: ID!, $pageSizeMedium: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        users(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              address\n              ensName\n              pieces(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n              piecesCount\n              pieceLikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceLikesCount\n              pieceDislikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceDislikesCount\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        usersCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query WebsiteUsers($id: ID!, $pageSizeMedium: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        users(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              address\n              ensName\n              pieces(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n              piecesCount\n              pieceLikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceLikesCount\n              pieceDislikes(first: $pageSizeMedium) {\n                edges {\n                  node {\n                    id\n                    piece {\n                      id\n                    }\n                    owner {\n                      address\n                    }\n                  }\n                }\n              }\n              pieceDislikesCount\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        usersCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WebsitePieces($id: ID!, $piecesPageSize: Int!, $pageSizeMax: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        pieces(first: $piecesPageSize) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category {\n                id\n                name\n              }\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              likes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              likesCount\n              dislikes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              dislikesCount\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query WebsitePieces($id: ID!, $piecesPageSize: Int!, $pageSizeMax: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        pieces(first: $piecesPageSize) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category {\n                id\n                name\n              }\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              likes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              likesCount\n              dislikes(first: $pageSizeMax) {\n                edges {\n                  node {\n                    id\n                    owner {\n                      address\n                    }\n                    piece {\n                      id\n                    }\n                  }\n                }\n              }\n              dislikesCount\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EthAccount($id: ID!, $pageSizeMedium: Int!) {\n    node(id: $id) {\n      ... on EthAccount {\n        id\n        address\n        ensName\n        pieces(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        piecesCount\n        pieceLikes(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        pieceLikesCount\n        pieceDislikes(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        pieceDislikesCount\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EthAccount($id: ID!, $pageSizeMedium: Int!) {\n    node(id: $id) {\n      ... on EthAccount {\n        id\n        address\n        ensName\n        pieces(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        piecesCount\n        pieceLikes(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        pieceLikesCount\n        pieceDislikes(first: $pageSizeMedium) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        pieceDislikesCount\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateEthAccount($input: CreateEthAccountInput!) {\n    createEthAccount(input: $input) {\n      document {\n        id\n        address\n        ensName\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateEthAccount($input: CreateEthAccountInput!) {\n    createEthAccount(input: $input) {\n      document {\n        id\n        address\n        ensName\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Piece($id: ID!, $pageSizeMax: Int!) {\n    node(id: $id) {\n      ... on Piece {\n        id\n        CID\n        name\n        category {\n          id\n          name\n        }\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        likes(first: $pageSizeMax) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        likesCount\n        dislikes(first: $pageSizeMax) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        dislikesCount\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Piece($id: ID!, $pageSizeMax: Int!) {\n    node(id: $id) {\n      ... on Piece {\n        id\n        CID\n        name\n        category {\n          id\n          name\n        }\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        likes(first: $pageSizeMax) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        likesCount\n        dislikes(first: $pageSizeMax) {\n          edges {\n            node {\n              id\n              piece {\n                id\n              }\n              owner {\n                address\n              }\n            }\n          }\n        }\n        dislikesCount\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePiece($input: CreatePieceInput!) {\n    createPiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category {\n          id\n          name\n        }\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePiece($input: CreatePieceInput!) {\n    createPiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category {\n          id\n          name\n        }\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdatePiece($input: UpdatePieceInput!) {\n    updatePiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category {\n          id\n          name\n        }\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePiece($input: UpdatePieceInput!) {\n    updatePiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category {\n          id\n          name\n        }\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePieceLike($input: CreatePieceLikeInput!) {\n    createPieceLike(input: $input) {\n      document {\n        id\n        piece {\n          id\n        }\n        owner {\n          address\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePieceLike($input: CreatePieceLikeInput!) {\n    createPieceLike(input: $input) {\n      document {\n        id\n        piece {\n          id\n        }\n        owner {\n          address\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCategoryLike($input: CreateCategoryLikeInput!) {\n    createCategoryLike(input: $input) {\n      document {\n        id\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCategoryLike($input: CreateCategoryLikeInput!) {\n    createCategoryLike(input: $input) {\n      document {\n        id\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePieceDislike($input: CreatePieceDislikeInput!) {\n    createPieceDislike(input: $input) {\n      document {\n        id\n        piece {\n          id\n        }\n        owner {\n          address\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePieceDislike($input: CreatePieceDislikeInput!) {\n    createPieceDislike(input: $input) {\n      document {\n        id\n        piece {\n          id\n        }\n        owner {\n          address\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCategoryDislike($input: CreateCategoryDislikeInput!) {\n    createCategoryDislike(input: $input) {\n      document {\n        id\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCategoryDislike($input: CreateCategoryDislikeInput!) {\n    createCategoryDislike(input: $input) {\n      document {\n        id\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateFeatured($input: CreateFeaturedInput!) {\n    createFeatured(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateFeatured($input: CreateFeaturedInput!) {\n    createFeatured(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SubscriptionIndex($pageSize: Int!) {\n    subscriptionIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          subscribedID\n          subscribedWebsite {\n            id\n            websiteName\n            description\n            image\n          }\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubscriptionIndex($pageSize: Int!) {\n    subscriptionIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          subscribedID\n          subscribedWebsite {\n            id\n            websiteName\n            description\n            image\n          }\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Subscription($id: ID!, $piecesPageSize: Int!) {\n    node(id: $id) {\n      ... on Subscription {\n        id\n        subscribedID\n        subscribedWebsite {\n          id\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Subscription($id: ID!, $piecesPageSize: Int!) {\n    node(id: $id) {\n      ... on Subscription {\n        id\n        subscribedID\n        subscribedWebsite {\n          id\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSubscription($input: CreateSubscriptionInput!) {\n    createSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          id\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSubscription($input: CreateSubscriptionInput!) {\n    createSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          id\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSubscription($input: UpdateSubscriptionInput!) {\n    updateSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          id\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSubscription($input: UpdateSubscriptionInput!) {\n    updateSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          id\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Admin($id: ID!) {\n    node(id: $id) {\n      ... on Admin {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Admin($id: ID!) {\n    node(id: $id) {\n      ... on Admin {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateAdmin($input: CreateAdminInput!) {\n    createAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateAdmin($input: CreateAdminInput!) {\n    createAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateaAdmin($input: UpdateAdminInput!) {\n    updateAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateaAdmin($input: UpdateAdminInput!) {\n    updateAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WebsiteIndex($pageSize: Int!) {\n    websiteIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          websiteName\n          description\n          image\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query WebsiteIndex($pageSize: Int!) {\n    websiteIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          websiteName\n          description\n          image\n        }\n      }\n    }\n  }\n"];

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function graphql(source: string): unknown;

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;