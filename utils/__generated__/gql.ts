/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  fragment WebsiteData on Website {\n    id\n    admins(first: $adminsPageSize) {\n      edges {\n        node {\n          id\n          adminID\n          admin {\n            address\n            ensName\n          }\n          super\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    adminsCount\n    pieces(first: $piecesPageSize) {\n      edges {\n        node {\n          id\n          CID\n          name\n          category\n          details {\n            tags\n            type\n            media\n            IMDBID\n            TMDBID\n            format\n            poster\n            bitrate\n            albumTitle\n            artistNames\n            releaseType\n            musicBrainzID\n            imageThumbnailCID\n            initialReleaseYear\n            releaseDescription\n          }\n          approved\n          rejected\n          rejectionReason\n          ownerID\n          owner {\n            address\n            ensName\n          }\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    piecesCount\n    subscriptions(first: $subscriptionsPageSize) {\n      edges {\n        node {\n          id\n          subscribedID\n          subscribedWebsite {\n            websiteName\n            description\n            image\n            pieces(first: $piecesPageSize) {\n              edges {\n                node {\n                  id\n                  CID\n                  name\n                  category\n                  details {\n                    tags\n                    type\n                    media\n                    IMDBID\n                    TMDBID\n                    format\n                    poster\n                    bitrate\n                    albumTitle\n                    artistNames\n                    releaseType\n                    musicBrainzID\n                    imageThumbnailCID\n                    initialReleaseYear\n                    releaseDescription\n                  }\n                  approved\n                  rejected\n                  rejectionReason\n                  metadata {\n                    createdAt\n                    updatedAt\n                  }\n                }\n              }\n            }\n            piecesCount\n          }\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    subscriptionsCount\n    users(first: $usersPageSize) {\n      edges {\n        node {\n          id\n          address\n          ensName\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    usersCount\n  }\n": types.WebsiteDataFragmentDoc,
    "\n  fragment WebsiteAdmin on Admin {\n    id\n    adminID\n    admin {\n      address\n      ensName\n    }\n    super\n    inactive\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n": types.WebsiteAdminFragmentDoc,
    "\n  fragment WebsiteUser on EthAccount {\n    id\n    address\n    ensName\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n": types.WebsiteUserFragmentDoc,
    "\n  query Website($id: ID!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        websiteName\n        description\n        image\n      }\n    }\n  }\n": types.WebsiteDocument,
    "\n  query WebsiteData(\n    $id: ID!\n    $adminsPageSize: Int!\n    $piecesPageSize: Int!\n    $subscriptionsPageSize: Int!\n    $usersPageSize: Int!\n  ) {\n    node(id: $id) {\n      ... on Website {\n        id\n        admins(first: $adminsPageSize) {\n          edges {\n            node {\n              id\n              adminID\n              admin {\n                address\n                ensName\n              }\n              super\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        adminsCount\n        pieces(first: $piecesPageSize) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n        subscriptions(first: $subscriptionsPageSize) {\n          edges {\n            node {\n              id\n              subscribedID\n              subscribedWebsite {\n                websiteName\n                description\n                image\n                pieces(first: $piecesPageSize) {\n                  edges {\n                    node {\n                      id\n                      CID\n                      name\n                      category\n                      details {\n                        tags\n                        type\n                        media\n                        IMDBID\n                        TMDBID\n                        format\n                        poster\n                        bitrate\n                        albumTitle\n                        artistNames\n                        releaseType\n                        musicBrainzID\n                        imageThumbnailCID\n                        initialReleaseYear\n                        releaseDescription\n                      }\n                      approved\n                      rejected\n                      rejectionReason\n                      metadata {\n                        createdAt\n                        updatedAt\n                      }\n                    }\n                  }\n                }\n                piecesCount\n              }\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        subscriptionsCount\n        users(first: $usersPageSize) {\n          edges {\n            node {\n              id\n              address\n              ensName\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        usersCount\n      }\n    }\n  }\n": types.WebsiteDataDocument,
    "\n  query WebsiteUsers(\n    $id: ID!,\n    $usersPageSize: Int!, \n  ) {\n      node(id: $id) {\n        ... on Website {\n          id\n          users(first: $usersPageSize) {\n            edges {\n              node {\n                id\n                address\n                ensName\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n          usersCount\n        }\n      }\n    }\n": types.WebsiteUsersDocument,
    "\n  query WebsitePieces($id: ID!, $piecesPageSize: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        pieces(first: $piecesPageSize) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n      }\n    }\n  }\n": types.WebsitePiecesDocument,
    "\n  query EthAccount($id: ID!) {\n    node(id: $id) {\n      ... on EthAccount {\n        id\n        address\n        ensName\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.EthAccountDocument,
    "\n  mutation CreateEthAccount($input: CreateEthAccountInput!) {\n    createEthAccount(input: $input) {\n      document {\n        id\n        address\n        ensName\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.CreateEthAccountDocument,
    "\n  query Piece($id: ID!) {\n    node(id: $id) {\n      ... on Piece {\n        id\n        CID\n        name\n        category\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.PieceDocument,
    "\n  mutation CreatePiece($input: CreatePieceInput!) {\n    createPiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.CreatePieceDocument,
    "\n  mutation UpdatePiece($input: UpdatePieceInput!) {\n    updatePiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.UpdatePieceDocument,
    "\n  query SubscriptionIndex($pageSize: Int!) {\n    subscriptionIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          websiteID\n          website {\n            websiteName\n            description\n            image\n          }\n          subscribedID\n        }\n      }\n    }\n  }\n": types.SubscriptionIndexDocument,
    "\n  query Subscription($id: ID!, $piecesPageSize: Int!) {\n    node(id: $id) {\n      ... on Subscription {\n        id\n        subscribedID\n        subscribedWebsite {\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.SubscriptionDocument,
    "\n  mutation CreateSubscription($input: CreateSubscriptionInput!, $piecesPageSize: Int!) {\n    createSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          pieces(first: $piecesPageSize) {\n            edges {\n              node {\n                id\n                CID\n                name\n                approved\n                rejected\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n          piecesCount\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.CreateSubscriptionDocument,
    "\n  mutation UpdateSubscription($input: UpdateSubscriptionInput!) {\n    updateSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.UpdateSubscriptionDocument,
    "\n  query Admin($id: ID!) {\n    node(id: $id) {\n      ... on Admin {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.AdminDocument,
    "\n  mutation CreateAdmin($input: CreateAdminInput!) {\n    createAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.CreateAdminDocument,
    "\n  mutation UpdateaAdmin($input: UpdateAdminInput!) {\n    updateAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.UpdateaAdminDocument,
    "\n  query WebsiteIndex($pageSize: Int!) {\n    websiteIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          websiteName\n          description\n          image\n        }\n      }\n    }\n  }\n": types.WebsiteIndexDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WebsiteData on Website {\n    id\n    admins(first: $adminsPageSize) {\n      edges {\n        node {\n          id\n          adminID\n          admin {\n            address\n            ensName\n          }\n          super\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    adminsCount\n    pieces(first: $piecesPageSize) {\n      edges {\n        node {\n          id\n          CID\n          name\n          category\n          details {\n            tags\n            type\n            media\n            IMDBID\n            TMDBID\n            format\n            poster\n            bitrate\n            albumTitle\n            artistNames\n            releaseType\n            musicBrainzID\n            imageThumbnailCID\n            initialReleaseYear\n            releaseDescription\n          }\n          approved\n          rejected\n          rejectionReason\n          ownerID\n          owner {\n            address\n            ensName\n          }\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    piecesCount\n    subscriptions(first: $subscriptionsPageSize) {\n      edges {\n        node {\n          id\n          subscribedID\n          subscribedWebsite {\n            websiteName\n            description\n            image\n            pieces(first: $piecesPageSize) {\n              edges {\n                node {\n                  id\n                  CID\n                  name\n                  category\n                  details {\n                    tags\n                    type\n                    media\n                    IMDBID\n                    TMDBID\n                    format\n                    poster\n                    bitrate\n                    albumTitle\n                    artistNames\n                    releaseType\n                    musicBrainzID\n                    imageThumbnailCID\n                    initialReleaseYear\n                    releaseDescription\n                  }\n                  approved\n                  rejected\n                  rejectionReason\n                  metadata {\n                    createdAt\n                    updatedAt\n                  }\n                }\n              }\n            }\n            piecesCount\n          }\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    subscriptionsCount\n    users(first: $usersPageSize) {\n      edges {\n        node {\n          id\n          address\n          ensName\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    usersCount\n  }\n"): (typeof documents)["\n  fragment WebsiteData on Website {\n    id\n    admins(first: $adminsPageSize) {\n      edges {\n        node {\n          id\n          adminID\n          admin {\n            address\n            ensName\n          }\n          super\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    adminsCount\n    pieces(first: $piecesPageSize) {\n      edges {\n        node {\n          id\n          CID\n          name\n          category\n          details {\n            tags\n            type\n            media\n            IMDBID\n            TMDBID\n            format\n            poster\n            bitrate\n            albumTitle\n            artistNames\n            releaseType\n            musicBrainzID\n            imageThumbnailCID\n            initialReleaseYear\n            releaseDescription\n          }\n          approved\n          rejected\n          rejectionReason\n          ownerID\n          owner {\n            address\n            ensName\n          }\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    piecesCount\n    subscriptions(first: $subscriptionsPageSize) {\n      edges {\n        node {\n          id\n          subscribedID\n          subscribedWebsite {\n            websiteName\n            description\n            image\n            pieces(first: $piecesPageSize) {\n              edges {\n                node {\n                  id\n                  CID\n                  name\n                  category\n                  details {\n                    tags\n                    type\n                    media\n                    IMDBID\n                    TMDBID\n                    format\n                    poster\n                    bitrate\n                    albumTitle\n                    artistNames\n                    releaseType\n                    musicBrainzID\n                    imageThumbnailCID\n                    initialReleaseYear\n                    releaseDescription\n                  }\n                  approved\n                  rejected\n                  rejectionReason\n                  metadata {\n                    createdAt\n                    updatedAt\n                  }\n                }\n              }\n            }\n            piecesCount\n          }\n          inactive\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    subscriptionsCount\n    users(first: $usersPageSize) {\n      edges {\n        node {\n          id\n          address\n          ensName\n          metadata {\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    usersCount\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WebsiteAdmin on Admin {\n    id\n    adminID\n    admin {\n      address\n      ensName\n    }\n    super\n    inactive\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  fragment WebsiteAdmin on Admin {\n    id\n    adminID\n    admin {\n      address\n      ensName\n    }\n    super\n    inactive\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WebsiteUser on EthAccount {\n    id\n    address\n    ensName\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  fragment WebsiteUser on EthAccount {\n    id\n    address\n    ensName\n    metadata {\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Website($id: ID!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        websiteName\n        description\n        image\n      }\n    }\n  }\n"): (typeof documents)["\n  query Website($id: ID!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        websiteName\n        description\n        image\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WebsiteData(\n    $id: ID!\n    $adminsPageSize: Int!\n    $piecesPageSize: Int!\n    $subscriptionsPageSize: Int!\n    $usersPageSize: Int!\n  ) {\n    node(id: $id) {\n      ... on Website {\n        id\n        admins(first: $adminsPageSize) {\n          edges {\n            node {\n              id\n              adminID\n              admin {\n                address\n                ensName\n              }\n              super\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        adminsCount\n        pieces(first: $piecesPageSize) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n        subscriptions(first: $subscriptionsPageSize) {\n          edges {\n            node {\n              id\n              subscribedID\n              subscribedWebsite {\n                websiteName\n                description\n                image\n                pieces(first: $piecesPageSize) {\n                  edges {\n                    node {\n                      id\n                      CID\n                      name\n                      category\n                      details {\n                        tags\n                        type\n                        media\n                        IMDBID\n                        TMDBID\n                        format\n                        poster\n                        bitrate\n                        albumTitle\n                        artistNames\n                        releaseType\n                        musicBrainzID\n                        imageThumbnailCID\n                        initialReleaseYear\n                        releaseDescription\n                      }\n                      approved\n                      rejected\n                      rejectionReason\n                      metadata {\n                        createdAt\n                        updatedAt\n                      }\n                    }\n                  }\n                }\n                piecesCount\n              }\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        subscriptionsCount\n        users(first: $usersPageSize) {\n          edges {\n            node {\n              id\n              address\n              ensName\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        usersCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query WebsiteData(\n    $id: ID!\n    $adminsPageSize: Int!\n    $piecesPageSize: Int!\n    $subscriptionsPageSize: Int!\n    $usersPageSize: Int!\n  ) {\n    node(id: $id) {\n      ... on Website {\n        id\n        admins(first: $adminsPageSize) {\n          edges {\n            node {\n              id\n              adminID\n              admin {\n                address\n                ensName\n              }\n              super\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        adminsCount\n        pieces(first: $piecesPageSize) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n        subscriptions(first: $subscriptionsPageSize) {\n          edges {\n            node {\n              id\n              subscribedID\n              subscribedWebsite {\n                websiteName\n                description\n                image\n                pieces(first: $piecesPageSize) {\n                  edges {\n                    node {\n                      id\n                      CID\n                      name\n                      category\n                      details {\n                        tags\n                        type\n                        media\n                        IMDBID\n                        TMDBID\n                        format\n                        poster\n                        bitrate\n                        albumTitle\n                        artistNames\n                        releaseType\n                        musicBrainzID\n                        imageThumbnailCID\n                        initialReleaseYear\n                        releaseDescription\n                      }\n                      approved\n                      rejected\n                      rejectionReason\n                      metadata {\n                        createdAt\n                        updatedAt\n                      }\n                    }\n                  }\n                }\n                piecesCount\n              }\n              inactive\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        subscriptionsCount\n        users(first: $usersPageSize) {\n          edges {\n            node {\n              id\n              address\n              ensName\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        usersCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WebsiteUsers(\n    $id: ID!,\n    $usersPageSize: Int!, \n  ) {\n      node(id: $id) {\n        ... on Website {\n          id\n          users(first: $usersPageSize) {\n            edges {\n              node {\n                id\n                address\n                ensName\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n          usersCount\n        }\n      }\n    }\n"): (typeof documents)["\n  query WebsiteUsers(\n    $id: ID!,\n    $usersPageSize: Int!, \n  ) {\n      node(id: $id) {\n        ... on Website {\n          id\n          users(first: $usersPageSize) {\n            edges {\n              node {\n                id\n                address\n                ensName\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n          usersCount\n        }\n      }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WebsitePieces($id: ID!, $piecesPageSize: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        pieces(first: $piecesPageSize) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query WebsitePieces($id: ID!, $piecesPageSize: Int!) {\n    node(id: $id) {\n      ... on Website {\n        id\n        pieces(first: $piecesPageSize) {\n          edges {\n            node {\n              id\n              CID\n              name\n              category\n              details {\n                tags\n                type\n                media\n                IMDBID\n                TMDBID\n                format\n                poster\n                bitrate\n                albumTitle\n                artistNames\n                releaseType\n                musicBrainzID\n                imageThumbnailCID\n                initialReleaseYear\n                releaseDescription\n              }\n              approved\n              rejected\n              rejectionReason\n              ownerID\n              owner {\n                address\n                ensName\n              }\n              metadata {\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        piecesCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EthAccount($id: ID!) {\n    node(id: $id) {\n      ... on EthAccount {\n        id\n        address\n        ensName\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EthAccount($id: ID!) {\n    node(id: $id) {\n      ... on EthAccount {\n        id\n        address\n        ensName\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateEthAccount($input: CreateEthAccountInput!) {\n    createEthAccount(input: $input) {\n      document {\n        id\n        address\n        ensName\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateEthAccount($input: CreateEthAccountInput!) {\n    createEthAccount(input: $input) {\n      document {\n        id\n        address\n        ensName\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Piece($id: ID!) {\n    node(id: $id) {\n      ... on Piece {\n        id\n        CID\n        name\n        category\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Piece($id: ID!) {\n    node(id: $id) {\n      ... on Piece {\n        id\n        CID\n        name\n        category\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePiece($input: CreatePieceInput!) {\n    createPiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePiece($input: CreatePieceInput!) {\n    createPiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdatePiece($input: UpdatePieceInput!) {\n    updatePiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePiece($input: UpdatePieceInput!) {\n    updatePiece(input: $input) {\n      document {\n        id\n        CID\n        name\n        category\n        details {\n          tags\n          type\n          media\n          IMDBID\n          TMDBID\n          format\n          poster\n          bitrate\n          albumTitle\n          artistNames\n          releaseType\n          musicBrainzID\n          imageThumbnailCID\n          initialReleaseYear\n          releaseDescription\n        }\n        approved\n        rejected\n        rejectionReason\n        ownerID\n        owner {\n          address\n          ensName\n        }\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SubscriptionIndex($pageSize: Int!) {\n    subscriptionIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          websiteID\n          website {\n            websiteName\n            description\n            image\n          }\n          subscribedID\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubscriptionIndex($pageSize: Int!) {\n    subscriptionIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          websiteID\n          website {\n            websiteName\n            description\n            image\n          }\n          subscribedID\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Subscription($id: ID!, $piecesPageSize: Int!) {\n    node(id: $id) {\n      ... on Subscription {\n        id\n        subscribedID\n        subscribedWebsite {\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Subscription($id: ID!, $piecesPageSize: Int!) {\n    node(id: $id) {\n      ... on Subscription {\n        id\n        subscribedID\n        subscribedWebsite {\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSubscription($input: CreateSubscriptionInput!, $piecesPageSize: Int!) {\n    createSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          pieces(first: $piecesPageSize) {\n            edges {\n              node {\n                id\n                CID\n                name\n                approved\n                rejected\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n          piecesCount\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSubscription($input: CreateSubscriptionInput!, $piecesPageSize: Int!) {\n    createSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          pieces(first: $piecesPageSize) {\n            edges {\n              node {\n                id\n                CID\n                name\n                approved\n                rejected\n                metadata {\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n          piecesCount\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSubscription($input: UpdateSubscriptionInput!) {\n    updateSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSubscription($input: UpdateSubscriptionInput!) {\n    updateSubscription(input: $input) {\n      document {\n        id\n        subscribedID\n        subscribedWebsite {\n          websiteName\n          description\n          image\n        }\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Admin($id: ID!) {\n    node(id: $id) {\n      ... on Admin {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Admin($id: ID!) {\n    node(id: $id) {\n      ... on Admin {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateAdmin($input: CreateAdminInput!) {\n    createAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateAdmin($input: CreateAdminInput!) {\n    createAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateaAdmin($input: UpdateAdminInput!) {\n    updateAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateaAdmin($input: UpdateAdminInput!) {\n    updateAdmin(input: $input) {\n      document {\n        id\n        adminID\n        admin {\n          address\n          ensName\n        }\n        super\n        inactive\n        metadata {\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WebsiteIndex($pageSize: Int!) {\n    websiteIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          websiteName\n          description\n          image\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query WebsiteIndex($pageSize: Int!) {\n    websiteIndex(first: $pageSize) {\n      edges {\n        node {\n          id\n          websiteName\n          description\n          image\n        }\n      }\n    }\n  }\n"];

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function graphql(source: string): unknown;

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;